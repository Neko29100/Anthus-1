/* autogenerated by Processing revision 1293 on 2023-10-08 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;
import processing.serial.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SERIAL_MONITOR_0_2 extends PApplet {

/* autogenerated by Processing revision 1293 on 2023-09-28 */








  

  Serial myPort;    
  PImage img;
  int xPos = 1;
  float yPos, PrePosx, Temp, TempRaw, PreHeat, currentAltitude, currentAltitudeRaw, PreAlt, Press, PrePress, Hum, HumRaw, PreHum;
  
  float formAltitude, climbR;

  String TempDis;
  String input = "0";
  String FStroke;
  int intStroke;

  int[] sensorData;

  int intro, alpha, a, b, a2, b2, a3, a4 = 0;
  long interval, interval2 = 0;
  
  public void setup () {
    // set the window size:
    /* size commented out by preprocessor */;
    
    /* size commented out by preprocessor */;
    
    myPort = new Serial(this, "COM16", 115200);


    myPort.bufferUntil('\n');
    
    background(0);
        myPort.write('r');
    
    textSize(100);
    textAlign(CENTER);
    fill(0xFFFFFFFF);
    text("Flight Control", 850, 100);
    textSize(40);
    text("Press enter to continue", 850, 550);
    text("Sea-Level Pressure Today:", 850, 380);
    rectMode(CENTER);

    img = loadImage("Reload.png");
        
    delay(10);
  }




  public void draw () {

    FStroke = input.substring(Math.max(0, input.length() - 4));

    try{
      intStroke = Integer.valueOf(FStroke);
    } 
    catch (NumberFormatException ex) {
      ex.printStackTrace();
    }

    if (intro != 1) {
      stroke(255, 255, 255);
      fill(0x000000);
      rect(850, 450, 150, 60);
      textAlign(CENTER);
      fill(255, 255, 255);
      textSize(60);
      text(FStroke, 850, 470);
      delay(10);

      formAltitude = currentAltitudeRaw;
    }

    if (keyCode == BACKSPACE && intro != 1) {
      input = "0";
    }

    if (keyCode == ENTER && intro != 1) {
      background(0);
      delay(10);
      intro = 1;
    }
    

//////////////////////////////////////////////////////////////

    
  if (intro == 1) {
  


  if (a4 == 0) {
    drawBackground();
    
  }
  
  drawGrid();
  rtVal();
  sensorStatus();



     if (millis() - interval2 > 10000) {
      interval2 = millis();
      climbR = (formAltitude - currentAltitudeRaw)/10;
      delay(1);
      formAltitude = currentAltitudeRaw;
    }

  
if (millis() - interval > 500) {
      interval = millis();
    



 ////////////////////////////////////////////

    if (mousePressed && (mouseY > 0) && (mouseY < 100) && (mouseX > 1625) && (mouseX < 1700)) {
     xPos = 0;
     PreHeat = Temp;
     PrePosx = 0;
     background(0);   
     a3 = 0;
     a4 = 0;
    }


 /////////////////////////////////////////////

    if (PreHeat == 0 ) {
    PreHum = Hum;
    PreHeat = Temp;
    PrePress = Press;
    PreAlt = currentAltitude;
    
    xPos = 0;
    } else {
    
    stroke(255, 255, 255);
    line(PrePosx, PreHeat, xPos - 1, yPos);
    line(PrePosx, PrePress, xPos - 1, Press);
    if (currentAltitudeRaw > 0) {line(PrePosx + 500, PreAlt, xPos + 499 , currentAltitude);}
    line(PrePosx + 500, PreHum, xPos + 499, Hum);
    

    
    delay(10);
    yPos = Temp;
    PreHum = Hum;
    PrePress = Press;
    PrePosx = xPos;
    PreHeat = Temp;
    PreAlt = currentAltitude;
    }
    
    if (xPos >= 500) {
     xPos = 0;
     PreHeat = Temp;
     PrePosx = 0;
     background(0);   
    
    drawBackground();
    
    a3 = 0;
    a4 = 0;
    } else {

     xPos = xPos + 3;

     }
    }
   }
  }



////////////////////////////////////////////////////////////
  public void serialEvent (Serial myPort) {

       try {
   String inString = myPort.readString();
   String[] stringData = split(inString, ',');
   float[] values = PApplet.parseFloat(stringData);
   
   
   if (inString != null) {
    
   
    currentAltitudeRaw = 44330 * (1.0f - pow(values[1] / intStroke, 0.1903f));

    Temp = map(values[0], 50, 0, 0, 500);
    Press = map(values[1], 900, 1020, 500, 1000);
    Hum = map(values[2], 30, 120, 1000, 500);
    currentAltitude = map(currentAltitudeRaw, 0, 1000, 500, 0);
    
    TempRaw = values[0];
    HumRaw = values[2];
   

   myPort.write('s');
   
  
       }
   }

    catch(RuntimeException e) {
    e.printStackTrace();
      }
  }


  public void keyPressed() {
    
    if (keyCode != ENTER && keyCode != BACKSPACE) input += key;

  
}
public void drawBackground(){
    
    textSize(20);
    fill(0xFFFFFFFF);
    textAlign(CENTER);
    text("Temperature(°C)", 250, 50);
    text("Pressure Altitude (m)", 750, 50);
    text("Pressure (hPa)", 250, 550);
    text("Humidity (%)", 750, 550);
    
    textAlign(LEFT);
    text("BMP280", 1020, 25);
    text("HTU21D", 1120, 25);
    text("Temp.", 1020, 100);
    text("Speed", 1320, 100);
    text("Altitude", 1220, 100);
    text("Humd.", 1120, 100);
    text("Climb R.", 1420, 100);
    
      
      
    text("°C", 1055, 120);  
    text("m/s", 1365, 120); 
    text("m", 1265, 120);
    text("%", 1165, 120);
    text("m/s", 1465, 120);
    
    textSize(15);
    text("50", 3, 12);
    text("0", 3, 495);
    text("900", 3, 512);
    text("1020", 3, 995);
    text("1000", 503, 12);
    text("0", 503, 495);
    text("20", 503, 995);
    text("150", 503, 512);


    textSize(15);
    text("SL :", 228, 565);
    text(intStroke, 250, 565);
    
    image(img, 1625, 0, 70, 70);
    
    a4 = 1;
}

public void drawGrid () {
    fill(0xFFFFFFFF);
    line(0, 1000, 0, 0);
    line(0, 500, 1000, 500);
    line(500, 1000, 500, 0);
    line(1000, 0, 1000, 1000);
    line(1000, 70, 1700, 70);
}
public void sensorStatus() {

    a = 0;
    b = 0; 
    
    if (Hum < 0) { //HTU21D Status
      while (b < 1){
      fill(0xFF000000);
      noStroke();
      rect(1150, 45, 100, 40);
      textSize(20);
      textAlign(LEFT);
      fill(0xFFFF0000);
      text("Offline", 1120, 50);
      b++;
      }
      
    } else {
      while (a < 1){
      fill(0xFF000000);
      noStroke();
      rect(1150, 45, 100, 40);
      textSize(20);
      textAlign(LEFT);
      fill(0xFF00FF00);
      text("Online", 1120, 50);
      a++;
      }
    }
    
    a2 = 0;
    b2 = 0; 
    
    if (Temp < 0) { //BMP280 Status
      while (b2 < 1){
      fill(0xFF000000);
      noStroke();
      rect(1070, 45, 100, 40);
      textSize(20);
      textAlign(LEFT);
      fill(0xFFFF0000);
      text("Offline", 1020, 50);
      b2++;
      }
      
    } else {
      while (a2 < 1){
      fill(0xFF000000);
      noStroke();
      rect(1070, 45, 100, 40);
      textSize(20);
      textAlign(LEFT);
      fill(0xFF00FF00);
      text("Online", 1020, 50);
      a2++;
      }
    }

   int b3 = 0; 
    
    if (intStroke > 1050 || intStroke < 1000) { //Press alt check
      while (b3 < 1){
      fill(0xFF000000);
      noStroke();
      rect(720, 245, 350, 50);
      textSize(20);
      textAlign(CENTER);
      fill(0xFFFF0000);
      text("Sea-Level Pressure out of bounds!", 750, 250);
      text("Please restart software", 750, 270);
      
      b3++;
      }
      
    } 
}
public void rtVal( ){

    
    fill(0xFF000000);
    noStroke();
    rect(1037, 115, 35, 20);
    rect(1142, 115, 45, 20);
    rect(1237, 115, 45, 20);
    rect(1337, 115, 35, 20);
    rect(1437, 115, 35, 20);       
    fill(0xFFFFFFFF);
    
    textSize(20);
    textAlign(LEFT);
    text(nf(TempRaw, 0, 1), 1020, 120);  
    text(nf(currentAltitudeRaw, 0, 1), 1320, 120); 
    text(nf(currentAltitudeRaw, 0, 1), 1220, 120);
    text(nf(HumRaw, 0, 1), 1120, 120);
    text(nf(climbR, 0, 1), 1420, 120); 
}


  public void settings() { size(1700, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SERIAL_MONITOR_0_2" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
