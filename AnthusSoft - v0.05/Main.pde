/* autogenerated by Processing revision 1293 on 2023-09-28 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.serial.*;


  

  Serial myPort;    
  PImage img;
  int xPos = 1;
  float yPos, PrePosx, Temp, TempRaw, PreHeat, currentAltitude, currentAltitudeRaw, PreAlt, Press, PrePress, Hum, HumRaw, PreHum;
  
  float formAltitude, climbR;

  String TempDis;
  String input = "0";
  String FStroke;
  int intStroke;

  int[] sensorData;

  int intro, alpha, a, b, a2, b2, a3, a4 = 0;
  long interval, interval2 = 0;
  
  public void setup () {
    // set the window size:
    /* size commented out by preprocessor */;
    
    size(1700, 1000);
    
    myPort = new Serial(this, "COM16", 115200);


    myPort.bufferUntil('\n');
    
    background(0);
        myPort.write('r');
    
    textSize(100);
    textAlign(CENTER);
    fill(0xFFFFFFFF);
    text("Flight Control", 850, 100);
    textSize(40);
    text("Press enter to continue", 850, 550);
    text("Sea-Level Pressure Today:", 850, 380);
    rectMode(CENTER);

    img = loadImage("Reload.png");
        
    delay(10);
  }




  public void draw () {

    FStroke = input.substring(Math.max(0, input.length() - 4));

    try{
      intStroke = Integer.valueOf(FStroke);
    } 
    catch (NumberFormatException ex) {
      ex.printStackTrace();
    }

    if (intro != 1) {
      stroke(255, 255, 255);
      fill(0x000000);
      rect(850, 450, 150, 60);
      textAlign(CENTER);
      fill(255, 255, 255);
      textSize(60);
      text(FStroke, 850, 470);
      delay(10);

      formAltitude = currentAltitudeRaw;
    }

    if (keyCode == BACKSPACE && intro != 1) {
      input = "0";
    }

    if (keyCode == ENTER && intro != 1) {
      background(0);
      delay(10);
      intro = 1;
    }
    

//////////////////////////////////////////////////////////////

    
  if (intro == 1) {
  


  if (a4 == 0) {
    drawBackground();
    
  }
  
  drawGrid();
  rtVal();
  sensorStatus();



     if (millis() - interval2 > 10000) {
      interval2 = millis();
      climbR = (formAltitude - currentAltitudeRaw)/10;
      delay(1);
      formAltitude = currentAltitudeRaw;
    }

  
if (millis() - interval > 500) {
      interval = millis();
    



 ////////////////////////////////////////////

    if (mousePressed && (mouseY > 0) && (mouseY < 100) && (mouseX > 1625) && (mouseX < 1700)) {
     xPos = 0;
     PreHeat = Temp;
     PrePosx = 0;
     background(0);   
     a3 = 0;
     a4 = 0;
    }


 /////////////////////////////////////////////

    if (PreHeat == 0 ) {
    PreHum = Hum;
    PreHeat = Temp;
    PrePress = Press;
    PreAlt = currentAltitude;
    
    xPos = 0;
    } else {
    
    stroke(255, 255, 255);
    line(PrePosx, PreHeat, xPos - 1, yPos);
    line(PrePosx, PrePress, xPos - 1, Press);
    if (currentAltitudeRaw > 0) {line(PrePosx + 500, PreAlt, xPos + 499 , currentAltitude);}
    line(PrePosx + 500, PreHum, xPos + 499, Hum);
    

    
    delay(10);
    yPos = Temp;
    PreHum = Hum;
    PrePress = Press;
    PrePosx = xPos;
    PreHeat = Temp;
    PreAlt = currentAltitude;
    }
    
    if (xPos >= 500) {
     xPos = 0;
     PreHeat = Temp;
     PrePosx = 0;
     background(0);   
    
    drawBackground();
    
    a3 = 0;
    a4 = 0;
    } else {

     xPos = xPos + 3;

     }
    }
   }
  }



////////////////////////////////////////////////////////////
  public void serialEvent (Serial myPort) {

       try {
   String inString = myPort.readString();
   String[] stringData = split(inString, ',');
   float[] values = PApplet.parseFloat(stringData);
   
   
   if (inString != null) {
    
   
    currentAltitudeRaw = 44330 * (1.0f - pow(values[1] / intStroke, 0.1903f));

    Temp = map(values[0], 50, 0, 0, 500);
    Press = map(values[1], 900, 1020, 500, 1000);
    Hum = map(values[2], 30, 120, 1000, 500);
    currentAltitude = map(currentAltitudeRaw, 0, 1000, 500, 0);
    
    TempRaw = values[0];
    HumRaw = values[2];
   

   myPort.write('s');
   
  
       }
   }

    catch(RuntimeException e) {
    e.printStackTrace();
      }
  }


  void keyPressed() {
    
    if (keyCode != ENTER && keyCode != BACKSPACE) input += key;

  
}